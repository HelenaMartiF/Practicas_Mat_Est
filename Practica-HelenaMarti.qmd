---
format: html
editor: visual
  markdown: 
    wrap: 72
---

Vasmos a cargar el dataset de AirBnB descargado de [aquí](https://public.opendatasoft.com/explore/dataset/airbnb-listings/export/?disjunctive.host_verifications&disjunctive.amenities&disjunctive.features&q=Madrid&dataChart=eyJxdWVyaWVzIjpbeyJjaGFydHMiOlt7InR5cGUiOiJjb2x1bW4iLCJmdW5jIjoiQ09VTlQiLCJ5QXhpcyI6Imhvc3RfbGlzdGluZ3NfY291bnQiLCJzY2llbnRpZmljRGlzcGxheSI6dHJ1ZSwiY29sb3IiOiJyYW5nZS1jdXN0b20ifV0sInhBeGlzIjoiY2l0eSIsIm1heHBvaW50cyI6IiIsInRpbWVzY2FsZSI6IiIsInNvcnQiOiIiLCJzZXJpZXNCcmVha2Rvd24iOiJyb29tX3R5cGUiLCJjb25maWciOnsiZGF0YXNldCI6ImFpcmJuYi1saXN0aW5ncyIsIm9wdGlvbnMiOnsiZGlzanVuY3RpdmUuaG9zdF92ZXJpZmljYXRpb25zIjp0cnVlLCJkaXNqdW5jdGl2ZS5hbWVuaXRpZXMiOnRydWUsImRpc2p1bmN0aXZlLmZlYXR1cmVzIjp0cnVlfX19XSwidGltZXNjYWxlIjoiIiwiZGlzcGxheUxlZ2VuZCI6dHJ1ZSwiYWxpZ25Nb250aCI6dHJ1ZX0%3D&location=16,41.38377,2.15774&basemap=jawg.streets)

![](descargar.png)

```{r}
airbnb<-read.csv('airbnb-listings.csv',sep = ';')
options(repr.plot.height=4,repr.plot.width=6,repr.plot.res = 300)

airbnb
# comprobando si todos los square.feet son na porque creo que la estoy liando
summary(airbnb$Square.Feet)
sum(is.na(airbnb$Square.Feet))
```

------------------------------------------------------------------------

```{r}

```

1.  Vamos a quedarnos con las columnas de mayor interés: 'City','Room.Type','Neighbourhood','Accommodates','Bathrooms','Bedrooms','Beds','Price','Square.Feet','Guests.Included','Extra.People','Review.Scores.Rating','Latitude', 'Longitude' Nos quedaremos solo con las entradas de Madrid para Room.Type=="Entire home/apt" y cuyo barrio (Neighbourhood) no está vacio '' Podemos eliminar las siguientes columnas que ya no son necesarias: "Room.Type",'City' Llama a nuevo dataframe df_madrid.

```{r}
# Seleccionamos las columnas de mayor interés

df_madrid <- airbnb[, c("City", "Room.Type", "Neighbourhood", "Accommodates", 
                           "Bathrooms", "Bedrooms", "Beds", "Price", "Square.Feet", 
                           "Guests.Included", "Extra.People", "Review.Scores.Rating", 
                           "Latitude", "Longitude")]

# Filtramos 

df_madrid <- df_madrid[df_madrid$City == "Madrid" &
                         df_madrid$Room.Type == "Entire home/apt" &
                         df_madrid$Neighbourhood != "",]

# Eliminamos las columnas que no necesitamos

df_madrid <- df_madrid[, !(names(df_madrid) %in% c("Room.Type", "City"))]


df_madrid

```

------------------------------------------------------------------------

2.  Crea una nueva columna llamada Square.Meters a partir de Square.Feet. Recuerda que un pie cuadrado son 0.092903 metros cuadrados.

```{r}

# Declaramos el valor de conversión
conversion <- 0.092903

# Creamos la nueva columna especificando la operación para sus valores
df_madrid$Square.Meters <- df_madrid$Square.Feet * conversion 

df_madrid

```

------------------------------------------------------------------------

3.  ¿Que porcentaje de los apartamentos no muestran los metros cuadrados? Es decir, ¿cuantos tienen NA en Square.Meters?

```{r}
# calculamos el número de filas con NA
total_na <- sum(is.na(df_madrid$Square.Meters))

# calculamos el total de filas del df
rows <- nrow(df_madrid)

# calculamos el porcentaje de NA dividiendo el total de filas por el total de NA y multiplicando por 100
percentage <- (total_na / rows) * 100

cat("Un", round(percentage, 2), "% de apartamentos no muestran los metros cuadrados")
```

------------------------------------------------------------------------

4.  De todos los apartamentos que tienen un valor de metros cuadrados diferente de NA ¿Que porcentaje de los apartamentos tienen 0 metros cuadrados?

```{r}


# filtramos los apartamentos que tienen u n valor DIFERENTE a NA
no_na <- df_madrid |> filter(!is.na(Square.Meters))

# calculamos el número total de apartamentos que hay con un valor DIFERENTE a NA
total_no_na <- nrow(no_na)

# de los que NO tienen NA buscamos los que tienen 0
zero_sq_meters <- no_na |> filter(Square.Meters == 0)

# calculamos el número total de 0
total_zero_sq_meters <- nrow(zero_sq_meters)

# calculamos el porcentaje
porcentaje_zero_meters <- (total_zero_sq_meters / total_no_na) * 100

cat("Un", round(porcentaje_zero_meters, 2), "% de los apartamentos tienen un valor de 0 m2")

```

------------------------------------------------------------------------

5.  Reemplazar todos los 0m\^2 por NA

```{r}
library(dplyr)

# verificamos si el valor de SqM es ', si lo es lo reemplazamos por NA con el mutate

df_madrid <- df_madrid |> mutate(Square.Meters = ifelse(Square.Meters == 0, NA, Square.Meters))

# comprobamos

head(df_madrid$Square.Meters)

```

------------------------------------------------------------------------

Hay muchos NAs, vamos a intentar crear un modelo que nos prediga cuantos son los metros cuadrados en función del resto de variables para tratar de rellenar esos NA. Pero **antes de crear el modelo** vamos a hacer: \* pintar el histograma de los metros cuadrados y ver si tenemos que filtrar algún elemento más. \* crear una variable sintética nueva basada en la similitud entre barrios que usaremos en nuestro modelo.

6.  Pinta el histograma de los metros cuadrados y ver si tenemos que filtrar algún elemento más

```{r}

# Pintar el histograma de los metros cuadrados
hist(df_madrid$Square.Meters, 
     main = "Histograma de Metros Cuadrados", 
     xlab = "Metros Cuadrados", 
     ylab = "Frecuencia", 
     col = "blue", 
     breaks = 20)

# Verificar si hay valores atípicos
summary(df_madrid$Square.Meters)

```

------------------------------------------------------------------------

7.  Asigna el valor NA a la columna Square.Meters de los apartamentos que tengan menos de 20 m\^2

```{r}
# volvemos a usar mutate para modificar el valor de Square meters, si es inferior a 20 -- NA

df_madrid <- df_madrid |>
  mutate(Square.Meters = ifelse(Square.Meters < 20, NA, Square.Meters))

# comprobamos
summary(df_madrid$Square.Meters)
```

------------------------------------------------------------------------

8.  Existen varios Barrios que todas sus entradas de Square.Meters son NA, vamos a eliminar del dataset todos los pisos que pertenecen a estos barrios.

```{r}
# agrupamos el df por la columna Neighbourhood y contamos los NA y el numero total de entradas

df_num_na <-df_madrid |>group_by(Neighbourhood) |>
  summarise(num_na = sum(is.na(Square.Meters)),num_total=n())

# buscamos los barrios que tengan NA en todas las entradas de sqmeters
barrios <- df_num_na[df_num_na$num_na==df_num_na$num_total,]$Neighbourhood


# filtramos el df original para ELIMINAR los pisos de esos barrios

df_madrid <- df_madrid |> filter(Neighbourhood %in% barrios)

head(df_madrid_filtered)
length(table(df_madrid_filtered$Neighbourhood))



```

------------------------------------------------------------------------

9.  ¿Tienen todos los barrios los mismos metros cuadrados de media? ¿Con que test lo comprobarías?

```{r}

```

------------------------------------------------------------------------

10. Vamos a agrupar los barrios por metros cuadrados. Podemos usar una matriz de similaridad de Tukey. Muestra como de similares o diferentes son los barrios si nos fijámos únicamente en los metros cuadrados de los pisos. ¿Como se diferencia la media del Barrio A al Barrio B? (Es decir, cual sería el pvalor suponiendo una H0 en la que las medias son iguales)

```{r}


```

------------------------------------------------------------------------

11. En el punto anterior has creado una matriz de p-valores que indica como de parecidos son dos barrios. Si su pvalor es alto significa que los barrios son diferentes, si es bajo significa que los barrios se parecen. Esta matriz la podemos usar como matriz de distancia si restamos el pvalor a 1. Es decir si usamos como distancia 1-pvalor. De esta forma barrios con un pvalor alto tendrán una distancia mayor que aquellos con un pvalor bajo. Usando esta última métrica como matriz de distancias dibuja un dendrograma de los diferentes barrios.

```{r}




```

------------------------------------------------------------------------

10. ¿Que punto de corte sería el aconsejable?, ¿cuantos clusters aparecen?

```{r}


```

------------------------------------------------------------------------

11. Vamos a crear una nueva columna en el dataframe df_madrid con un nuevo identificador marcado por los clusters obtenidos. Esta columna la llamaremos neighb_id

```{r}


```

------------------------------------------------------------------------

12. Vamos a crear dos grupos, uno test y otro train.

```{r}


```

------------------------------------------------------------------------

13. Tratamos de predecir los metros cuadrados en función del resto de columnas del dataframe.

```{r}


```

------------------------------------------------------------------------

14. Evaluar la calidad de vuestro modelo

```{r}


```

------------------------------------------------------------------------

15. Si tuvieramos un anuncio de un apartamento para 6 personas (Accommodates), con 1 baño, con un precio de 80€/noche y 3 habitaciones en el barrio de Sol, con 3 camas y un review de 80. ¿Cuantos metros cuadrados tendría? Si tu modelo necesita algúna variable adicional puedes inventartela dentro del rango de valores del dataset. ¿Como varía sus metros cuadrados con cada habitación adicional?

```{r}


```

------------------------------------------------------------------------

16. Rellenar los Square.Meters con valor NA con el estimado con el modelo anterior.

```{r}


```

------------------------------------------------------------------------
